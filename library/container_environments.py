#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# (c) 2021-2023, Bodo Schulz <bodo@boone-schulz.de>
# Apache-2.0 (see LICENSE or https://opensource.org/license/apache-2-0)
# SPDX-License-Identifier: Apache-2.0

from __future__ import absolute_import, division, print_function
import os
import shutil

from ansible.module_utils.basic import AnsibleModule
from ansible_collections.bodsch.core.plugins.module_utils.directory import create_directory
from ansible_collections.bodsch.core.plugins.module_utils.checksum import Checksum
from ansible_collections.bodsch.core.plugins.module_utils.module_results import results
from ansible_collections.bodsch.core.plugins.module_utils.template.template import write_template

TPL_ENV = """# generated by ansible

{% for key, value in item.items() %}
{{ key }}={{ value }}
{% endfor %}

"""

TPL_PROP = """# generated by ansible

{% for key, value in item.items() %}
{{ key.ljust(30) }} = {{ value }}
{% endfor %}

"""


class ContainerEnvironments(object):
    """
    """

    def __init__(self, module):
        """
        """
        self.module = module

        self.base_directory = module.params.get("base_directory")
        self.container = module.params.get("container")
        self.owner = module.params.get("owner")
        self.group = module.params.get("group")
        self.mode = module.params.get("mode")

        pid = os.getpid()

        self.tmp_directory = os.path.join("/run/.ansible", f"container_environments.{str(pid)}")

    def run(self):
        """
        """
        result = dict(
            changed=False,
            failed=True,
            msg="initial"
        )

        self.checksum = Checksum(self.module)

        create_directory(directory=self.tmp_directory, mode="0750")

        result_state = []

        for c in self.container:
            """
            """
            name = c.get("name")
            environments  = c.get("environments", {})
            properties = c.get("properties", {})
            property_files = c.get("property_files", [])
            defined_environments = (len(environments) > 0)
            defined_properties = (len(properties) > 0)
            defined_property_files = (len(property_files) > 0)

            tmp_directory = os.path.join(self.tmp_directory, name)

            create_directory(directory=tmp_directory, mode="0750")

            changed = False
            e_changed = False
            p_changed = False

            state = []

            """
              write environments
            """
            e_changed = self._write_environments(
                container_name=name,
                environments=environments
            )

            if defined_environments:
                _ = c.pop("environments")

            if e_changed:
                state.append("container.env")

            if defined_properties or defined_property_files:
                """
                  write properties
                """
                property_filename = f"{name}.properties"

                property_files.append({"name": property_filename, "properties": properties})

                for prop in property_files:
                    property_filename = prop.get("name", None)
                    properties = prop.get("properties", {})

                    _changed = self._write_properties(
                        container_name=name,
                        property_filename=property_filename,
                        properties=properties
                    )

                    if _changed:
                        p_changed = True
                        state.append(property_filename)

                if defined_properties:
                    _ = c.pop("properties")

                if defined_property_files:
                    _ = c.pop("property_files")

            if e_changed or p_changed:
                changed = True

            if changed:
                # add recreate to dictionary
                c['recreate'] = True

                res = {}
                state = ", ".join(state)
                state += " successful written"

                res[name] = dict(
                    # changed=True,
                    state=state,
                    changed=True
                )

                result_state.append(res)

        # define changed for the running tasks
        _state, _changed, _failed, state, changed, failed = results(self.module, result_state)

        result = dict(
            changed = _changed,
            failed = False,
            container_data = self.container,
            msg = result_state
        )

        shutil.rmtree(self.tmp_directory)

        return result

    def _write_environments(self, container_name, environments = {}):
        """
        """
        self.module.log(f"  container_name: {container_name}")
        tmp_directory = os.path.join(self.tmp_directory, container_name)

        checksum_file = os.path.join(self.base_directory, container_name, "container.env.checksum")
        data_file     = os.path.join(self.base_directory, container_name, "container.env")

        # if len(environments) == 0:
        #     """
        #         no environments
        #     """
        #     if os.path.exists(data_file):
        #         os.remove(data_file)
        #     if os.path.exists(checksum_file):
        #         os.remove(checksum_file)
        #
        #     return False

        """
            write temporary file and generate checksum
        """
        tmp_file     = os.path.join(tmp_directory, f"{container_name}.env")
        self.__write_template("environments", environments, tmp_file)
        new_checksum = self.checksum.checksum_from_file(tmp_file)

        self.module.log(f"  tmp_file: {tmp_file}")
        self.module.log(f"  new_checksum: {new_checksum}")

        """
            read checksum from real file
        """
        old_checksum = self.checksum.checksum_from_file(data_file)

        self.module.log(f"  data_file: {data_file}")
        self.module.log(f"  old_checksum: {old_checksum}")

        changed = not (new_checksum == old_checksum)

        if changed:
            self.__write_template("environments", environments, data_file, new_checksum, checksum_file)

        return changed

    def _write_properties(self, container_name, property_filename, properties = {}):
        """
        """
        self.module.log(f"  container_name: {container_name}")
        tmp_directory = os.path.join(self.tmp_directory, container_name)

        checksum_file = os.path.join(self.base_directory, container_name, f"{property_filename}.checksum")
        data_file     = os.path.join(self.base_directory, container_name, property_filename)

        if len(properties) == 0:
            if os.path.exists(data_file):
                os.remove(data_file)
            if os.path.exists(checksum_file):
                os.remove(checksum_file)

            return False

        tmp_file     = os.path.join(tmp_directory, property_filename)
        self.__write_template("properties", properties, tmp_file)
        new_checksum = self.checksum.checksum_from_file(tmp_file)

        self.module.log(f"  tmp_file: {tmp_file}")
        self.module.log(f"  new_checksum: {new_checksum}")

        old_checksum = self.checksum.checksum_from_file(data_file)

        self.module.log(f"  data_file    : {data_file}")
        self.module.log(f"  checksum_file: {checksum_file}")
        self.module.log(f"  old_checksum : {old_checksum}")

        changed = not (new_checksum == old_checksum)

        if changed:
            self.__write_template("properties", properties, data_file, new_checksum, checksum_file)

        return changed

    def __write_template(self, env, data, data_file, checksum = None, checksum_file = None):
        """
        """
        if env == "environments":
            tpl = TPL_ENV
        if env == "properties":
            tpl = TPL_PROP

        write_template(data_file, tpl, data)

        if checksum and checksum_file:
            self.checksum.write_checksum(checksum_file, checksum)


# ===========================================
# Module execution.


def main():
    """
    """
    args = dict(
        base_directory = dict(
            required=True,
            type='str'
        ),
        container = dict(
            required=True,
            type='list'
        ),
        owner=dict(
            required=False
        ),
        group=dict(
            required=False
        ),
        mode=dict(
            required=False,
            type="str"
        ),
    )

    module = AnsibleModule(
        argument_spec=args,
        supports_check_mode=True,
    )

    p = ContainerEnvironments(module)
    result = p.run()

    module.log(msg=f"= result: {result}")
    module.exit_json(**result)


if __name__ == '__main__':
    main()

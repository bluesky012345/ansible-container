---

- name: include OS specific configuration ({{ ansible_distribution }} ({{ ansible_os_family }}) {{ ansible_distribution_major_version }})
  include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      paths:
        - "vars"
      files:
        # eg. debian-10 / ubuntu-20.04 / centos-8 / oraclelinux-8
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}.yml"
        # eg. archlinux-systemd / archlinux-openrc
        - "{{ ansible_distribution | lower }}-{{ ansible_service_mgr | lower }}.yml"
        # eg. debian / ubuntu / centos / oraclelinux
        - "{{ ansible_distribution | lower }}.yml"
        # eg. redhat / debian / archlinux
        - "{{ ansible_os_family | lower }}.yml"
        - default.yaml
      skip: true

- block:
    - name: make sure python3-apt is installed (only debian based)
      package:
        name:
          - python3-apt
        state: present
      register: _installed

    - name: clean apt cache
      command: apt-get clean
      args:
        warn: false
      when:
        - _installed.changed
  when:
    - ansible_os_family | lower == 'debian'

- name: python support
  block:
    - name: create requirements.txt
      template:
        src: requirements.txt.j2
        dest: /tmp/container-requirements.txt
        mode: 0660

    - name: ensure python dependecies for container are installed
      pip:
        requirements: /tmp/container-requirements.txt
        state: present
        executable: pip{{ '3' if ansible_python.version.major | int == 3 else '' }}
      register: pip_install
      # ignore_errors: true
      # no_log: true

  when:
    - container_python_packages is defined
    - container_python_packages | count > 0

- name: install dependency
  package:
    name: "{{ container_packages }}"
    state: present

- name: merge container registry configuration between defaults and custom
  set_fact:
    container_registry: "{{ container_registry_default |
      combine( container_registry, recursive=True ) }}"

- name: get container_names from container
  set_fact:
    container_names: "{{ container | container_names }}"

- name: get container_images from container
  set_fact:
    container_images: "{{ container | container_images }}"

# - name: detect container volumes
#   set_fact:
#     container_volumes: "{{ container | container_volumes }}"
#
# - name: detect container mountpoints
#   set_fact:
#     container_mounts: "{{ container | container_mounts }}"

- name: validate container mountpoints
  fail:
    msg: "your mounts definition is not valid!\n
          The following parameters are required:\n
          - source\n
          - target\n
          - type\n
          'type' may only have one of the following values: 'bind','tmpfs' or 'volume'\n
          read: https://docs.ansible.com/ansible/latest/collections/community/docker/docker_container_module.html#parameter-mounts"
  when:
    - container_mounts is defined
    - container_mounts | count > 0
    - not item.source is defined or
      not item.target is defined or
      not item.type is defined or
      (item.type is defined and item.type not in ['bind','tmpfs','volume'] )
  loop: "{{ container_mounts | remove_source_handling }}"
  loop_control:
    label: "{{ item.source | default('undefined') }}"

- name: create base directory to persist docker environnments
  become: true
  file:
    name: "{{ container_env_directory }}"
    state: directory
    mode: 0o755

- name: create application directory to persist docker environnments
  become: true
  container_directories:
    base_directory: "{{ container_env_directory }}"
    container: "{{ container_names }}"
    owner: '1000'
    group: '1000'
    mode: "0775"
  register: _created_directories
  notify:
    - created application directories

- name: flush handlers
  meta: flush_handlers

- name: persist application docker environnments or properties
  become: true
  container_environments:
    base_directory: "{{ container_env_directory }}"
    container: "{{ container }}"
  register: _container_data
  notify:
    - update container for recreate running docker instance
    - created environnments or properties

- name: is a container restart necessary after changes to the protieries?  # noqa no-handler
  set_fact:
    container_update_needed: true
    # container_changed: "{{ changed_application_properties | properties_changed }}"
  when:
    - _container_data.changed

- name: flush handlers
  meta: flush_handlers


# - name: persist application docker environnments
#   become: true
#   template:
#     src: container.env.j2
#     dest: "{{ container_env_directory }}/{{ item.name }}/container.env"
#     mode: 0o755
#   with_items: "{{ container }}"
#   loop_control:
#     label: "{{ item.name }}"
#
# - name: persist application properties
#   become: true
#   container_properties:
#     dest: "{{ container_env_directory }}/{{ item.name }}/{{ item.name }}.properties"
#     properties: "{{ item.properties }}"
#   loop: "{{ container }}"
#   loop_control:
#     label: "{{ item.name }}"
#   register: changed_application_properties
#   when:
#     - item.properties is defined
#
# - name: Is a container restart necessary after changes to the protieries?  # noqa no-handler
#   set_fact:
#     container_update_needed: true
#     container_changed: "{{ changed_application_properties | properties_changed }}"
#   when:
#     - changed_application_properties.changed
#
# - name: update container for recreate running docker instance
#   set_fact:
#     container: "{{ container | update(container_changed) }}"
#   when:
#     - container_update_needed

- name: create container volumes and mountpoints
  become: true
  container_mounts:
    data: "{{ container }}"
    volumes: true
    mounts: true
  register: _created_directories
  notify:
    - created container volumes and mountpoints

- name: flush handlers
  meta: flush_handlers

# - name: result
#   debug:
#     msg: "{{ _created_directories }}"
#   when:
#     - _created_directories.changed

# - name: create container volumes
#   become: true
#   file:
#     name: "{{ item.local }}"
#     state: directory
#     owner: "{{ item.ansible.owner | default(omit) }}"
#     group: "{{ item.ansible.group | default(omit) }}"
#     mode: "{{ item.ansible.mode | default(omit) }}"
#   loop: "{{ container_volumes }}"
#   loop_control:
#     label: "{{ item.local }} /
#       ignore: {{ item.ansible.ignore | default('false') | bool }}
#       owner: {{ item.ansible.owner | default('-') }}
#       group: {{ item.ansible.group | default('-') }}
#       mode: {{ item.ansible.mode   | default('-') }}"
#   when:
#     - not item.ansible.ignore | default('false') | bool
#
# - name: create container mountpoints
#   become: true
#   file:
#     name: "{{ item.source }}"
#     state: directory
#     owner: "{{ item.source_handling.owner | default(omit) }}"
#     group: "{{ item.source_handling.group | default(omit) }}"
#     mode: "{{ item.source_handling.mode | default(omit) }}"
#   loop: "{{ container_mounts }}"
#   loop_control:
#     label: "{{ item.source }} /
#       owner: {{ item.source_handling.owner | default('-') }}
#       group: {{ item.source_handling.group | default('-') }}
#       mode: {{ item.source_handling.mode   | default('-') }}"

# - name: remove environnments from container
#   set_fact:
#     container: "{{ container | remove_values('environments') }}"
#
# - name: remove properties from container
#   set_fact:
#     container: "{{ container | remove_values('properties') }}"

- name: make sure ansible local facts directory exists
  become: true
  file:
    dest: /etc/ansible/facts.d
    state: directory
    owner: root
    group: root
    mode: 0o777

...
